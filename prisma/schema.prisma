generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  theme         String?   @default("system")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  domains       Domain[]
  sessions      Session[]
  urls          Url[]

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Url {
  id          String    @id @default(cuid())
  shortCode   String    @unique
  originalUrl String
  title       String?
  description String?
  userId      String
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  password    String?
  clickLimit  Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        String?
  domainId    String?
  clicks      Click[]
  domain      Domain?   @relation(fields: [domainId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("urls")
}

model Domain {
  id         String   @id @default(cuid())
  domain     String   @unique
  userId     String
  isDefault  Boolean  @default(false)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  urls       Url[]

  @@map("domains")
}

model Click {
  id        String   @id @default(cuid())
  urlId     String
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  device    String?
  browser   String?
  os        String?
  clickedAt DateTime @default(now())
  url       Url      @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@map("clicks")
}
